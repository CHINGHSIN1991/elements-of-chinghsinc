---
import { getCollection, type CollectionEntry } from 'astro:content';
import { slugify } from "../../ts/utils";

interface Props {
  currentProject: CollectionEntry<'projects'>;
  limit?: number;
}

const { currentProject, limit = 3 } = Astro.props;

const allProjects = await getCollection('projects', ({ data }) => {
  return !data.draft;
});

// 獲取相關專案（相同分類，排除當前專案）
const relatedProjects = allProjects
  .filter(project => 
    project.id !== currentProject.id && 
    project.data.category === currentProject.data.category
  )
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0, limit);
---

{relatedProjects.length > 0 && (
      <div class="dark:border-l-2 dark:border-gray-700 border-l-2 border-gray-200 px-2">
    <h2 class="text-xl font-bold mb-4 pl-2">相關專案</h2>
    <ul class="space-y-1">
      {relatedProjects.map(relatedProject => (
        <li class="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-300 px-2 py-1 rounded-md">
          <a
            href={`/project/${relatedProject.id || slugify(relatedProject.data.title)}`}
            class="block hover:text-primary-500 transition-colors"
          >
            <div class="flex items-center space-x-3">
              <div class="w-12 h-12 rounded-lg overflow-hidden flex-shrink-0">
                <img
                  src={relatedProject.data.cover}
                  alt={relatedProject.data.title}
                  class="w-full h-full object-cover"
                />
              </div>
              <div class="flex-1 min-w-0">
                <h3 class="font-medium text-sm line-clamp-2">
                  {relatedProject.data.title}
                </h3>
                <span class="text-xs text-gray-500 mt-1 block">
                  {relatedProject.data.category}
                </span>
              </div>
            </div>
          </a>
        </li>
      ))}
    </ul>
  </div>
)} 