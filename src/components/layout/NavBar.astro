---
import ThemeToggle from "../common/ThemeToggle.astro"
import navData from '../../data/navdata';
import { getLocaleFromUrl, getPathWithoutLocale, localizePath, localizeUrl } from '../../i18n/utils';
import { locales, type Locale } from '../../i18n/ui';

interface Props {
  lang?: Locale;
  t?: (key: string, replacements?: Record<string, string | number>) => any;
}

const { lang: incomingLang, t: translate } = Astro.props as Props;
const lang = incomingLang ?? getLocaleFromUrl(Astro.url);
const t = translate ?? ((key: string) => key);

const currentPath = getPathWithoutLocale(Astro.url);

const activeTabIndex = navData.findIndex((item) => {
  const normalizedItem = item.path === '/' ? '/' : item.path.replace(/\/$/, '');
  const normalizedCurrent = currentPath === '/' ? '/' : currentPath.replace(/\/$/, '');
  return (
    normalizedCurrent === normalizedItem ||
    normalizedCurrent.startsWith(`${normalizedItem}/`)
  );
});

const languageNameResult = t('common.languageNames');
const languageNames = typeof languageNameResult === 'object' && languageNameResult !== null
  ? (languageNameResult as Record<string, string>)
  : {};
---

<nav 
  id="navbar" 
  class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 ease-in-out"
>
  <div class="grid grid-cols-3 items-center px-4 md:px-10 py-2 w-full max-w-7xl mx-auto">
    <!-- Left: Logo -->
    <div class="flex justify-start">
      <a
        href={import.meta.env.BASE_URL}
        class="flex items-center gap-2 hover:opacity-80 transition-opacity"
      >
        <img
          src={import.meta.env.BASE_URL + "favicon.svg"}
          alt="Elements of ChingHsinC logo"
          class="w-8 h-8"
        />
      </a>
    </div>
    
    <!-- Center: Navigation Links -->
    <div class="flex justify-center">
      <ul class="flex items-center gap-4 py-2 relative nav-container">
        {navData.map((item, index) => (
          <li>
            <a
              href={localizePath(item.path, lang)}
              class={`nav-item block px-3 py-1 relative z-10 text-gray-800 dark:text-white hover:text-gray-600 dark:hover:text-gray-300 transition-colors ${
                index === activeTabIndex ? 'active text-primary font-bold' : ''
              }`}
              data-index={index}
              aria-current={index === activeTabIndex ? 'page' : undefined}
            >
              {t(item.id)}
            </a>
          </li>
        ))}

        <!-- 底線指示器 -->
        <li
          id="nav-indicator"
          aria-hidden="true"
          class="absolute bottom-0 h-0.5 bg-primary transition-all duration-300 pointer-events-none"
        ></li>
      </ul>
    </div>
    
    <!-- Right: Theme Toggle -->
    <div class="flex justify-end items-center gap-2">
      <div class="hidden sm:flex gap-2">
        {locales.map((locale) => {
          const label = languageNames?.[locale] ?? locale.toUpperCase();
          const isActive = locale === lang;
          const title = isActive
            ? t('common.languageSwitcher.current', { language: label })
            : t('common.languageSwitcher.switchTo', { language: label });
          return (
            <a
              href={localizeUrl(Astro.url, locale)}
              class={`px-3 py-1 rounded-md text-xs border transition-colors ${
                isActive
                  ? 'bg-primary text-white border-primary'
                  : 'border-gray-300 dark:border-gray-700 text-text-secondary hover:bg-gray-100 dark:hover:bg-background-secondary'
              }`}
              aria-current={isActive ? 'true' : undefined}
              aria-label={title}
            >
              {label}
            </a>
          );
        })}
      </div>
      <ThemeToggle ariaLabel={t('nav.themeToggle')} />
    </div>
  </div>
</nav>

<!-- Navbar styles -->
<style>
  
  /* Initial transparent state */
  #navbar {
    background: transparent;
    backdrop-filter: none;
  }
  
  /* Glass effect when scrolling */
  #navbar.scrolled {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  /* Dark mode glass effect */
  :global(.dark) #navbar.scrolled {
    background: rgba(0, 0, 0, 0.2);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  /* Adjust text color when scrolling - override default color */
  #navbar.scrolled .nav-item {
    color: var(--color-text) !important;
  }
  
  #navbar.scrolled .nav-item:hover {
    color: var(--color-text-secondary) !important;
  }
  
  /* Active item maintains primary color when scrolling */
  #navbar.scrolled .nav-item.active {
    color: var(--color-primary) !important;
  }
  
  /* Ensure logo has appropriate color when scrolling */
  #navbar.scrolled img {
    filter: brightness(1);
  }
  
  :global(.dark) #navbar.scrolled img {
    filter: brightness(1);
  }
  
  /* Responsive hide navigation items */
  @media (max-width: 768px) {
    .nav-container {
      gap: 0.5rem;
    }
    
    .nav-item {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }
  }
  
  @media (max-width: 640px) {
    .nav-container {
      gap: 0.25rem;
    }
    
    .nav-item {
      padding: 0.25rem;
      font-size: 0.75rem;
    }
  }
</style>

<script>
  // Handle underline position
  function updateNavIndicator() {
    const activeItem = document.querySelector('.nav-item.active') as HTMLElement | null;
    const navIndicator = document.getElementById('nav-indicator');
    
    if (activeItem && navIndicator) {
      const { offsetLeft, offsetWidth } = activeItem;
      navIndicator.style.left = `${offsetLeft}px`;
      navIndicator.style.width = `${offsetWidth}px`;
      navIndicator.style.opacity = '1';
    } else if (navIndicator) {
      navIndicator.style.opacity = '0';
    }
  }
  
  // Handle scroll effect
  function handleScroll() {
    const navbar = document.getElementById('navbar');
    if (!navbar) return;
    
    const scrollThreshold = 50; // Scroll threshold
    
    if (window.scrollY > scrollThreshold) {
      navbar.classList.add('scrolled');
    } else {
      navbar.classList.remove('scrolled');
    }
  }
  
  // Initial execution
  updateNavIndicator();
  handleScroll();
  
  // Listen to scroll event
  window.addEventListener('scroll', handleScroll, { passive: true });
  
  // Recalculate after page transition
  document.addEventListener('astro:page-load', () => {
    updateNavIndicator();
    handleScroll();
    
    // Rebind scroll event (if needed)
    window.addEventListener('scroll', handleScroll, { passive: true });
  });
  
  // Clear event listeners
  document.addEventListener('astro:before-swap', () => {
    window.removeEventListener('scroll', handleScroll);
  });
</script>
