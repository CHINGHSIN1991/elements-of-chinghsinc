---
import siteData from "../../data/siteData.json"
import jsonLDGenerator from "../../ts/jsonLD"
import {
  createAbsoluteUrl,
  getSiteBaseUrl,
  getSiteOrigin,
} from "../../ts/siteUrl"

const {
  title,
  description,
  url = Astro.url,
  image,
  robots,
  project,
  post,
} = Astro.props;

const siteBaseUrl = getSiteBaseUrl();
const siteOrigin = getSiteOrigin();

const canonicalUrl = (() => {
  if (url instanceof URL) return url.href;
  if (typeof url === "string" && url.length > 0) {
    return createAbsoluteUrl(url) ?? url;
  }
  return siteBaseUrl ?? "/";
})();

const resolvedTitle = title || siteData.title;
const resolvedDescription = description || siteData.description;
const locale = siteData.locale || "en_US";

const resolveOptionalAbsoluteUrl = (value?: string) =>
  value ? createAbsoluteUrl(value) ?? value : undefined;

const resolvedImage =
  resolveOptionalAbsoluteUrl(image?.src) ??
  resolveOptionalAbsoluteUrl(siteData.image?.src) ??
  siteData.image?.src;

const imageAlt = image?.alt || siteData.image?.alt || resolvedTitle;

const structuredItem = project ?? post;
const structuredType = project ? "project" : post ? "post" : "website";
const structuredData =
  structuredItem && typeof structuredItem === "object"
    ? structuredItem
    : undefined;

const resolveIsoDate = (value?: string) => {
  if (!value) return undefined;
  const parsed = new Date(value);
  return Number.isNaN(parsed.getTime()) ? undefined : parsed.toISOString();
};

const publishedTime = resolveIsoDate(structuredData?.date);
const modifiedTime = resolveIsoDate(
  (structuredData as any)?.updated ?? structuredData?.date
);
const articleSection = (structuredData as any)?.category;

const candidateAuthors = (() => {
  if (!structuredData || typeof structuredData !== "object") {
    return [] as string[];
  }

  const authors: string[] = [];
  if (typeof (structuredData as any).author === "string") {
    authors.push((structuredData as any).author);
  }
  if (Array.isArray((structuredData as any).designers)) {
    authors.push(...((structuredData as any).designers as string[]));
  }
  if (authors.length === 0 && siteData.author) {
    authors.push(siteData.author);
  }
  return Array.from(new Set(authors.filter(Boolean)));
})();

const articleTags = Array.isArray((structuredData as any)?.tags)
  ? ((structuredData as any).tags as string[]).filter(Boolean)
  : [];

const jsonLD = jsonLDGenerator({
  type: structuredType,
  item: structuredItem,
  url: canonicalUrl,
});

const ogType = structuredItem ? "article" : "website";

const twitterDomain = (() => {
  try {
    return new URL(canonicalUrl).hostname;
  } catch {
    if (siteOrigin) {
      try {
        return new URL(siteOrigin).hostname;
      } catch {
        return undefined;
      }
    }
    return undefined;
  }
})();
---

<!-- SEO -->
<link rel="canonical" href={canonicalUrl} />

<!-- Open Graph -->
<meta property="og:site_name" content={siteData.title} />
<meta property="og:type" content={ogType} />
<meta property="og:title" content={resolvedTitle} />
<meta property="og:description" content={resolvedDescription} />
<meta property="og:url" content={canonicalUrl} />
<meta property="og:locale" content={locale} />
{resolvedImage && <meta property="og:image" content={resolvedImage} />}
{resolvedImage && <meta property="og:image:url" content={resolvedImage} />}
{resolvedImage && <meta property="og:image:secure_url" content={resolvedImage} />}
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content={imageAlt} />
{structuredItem && (
  <>
    {publishedTime && (
      <meta property="article:published_time" content={publishedTime} />
    )}
    {modifiedTime && (
      <meta property="article:modified_time" content={modifiedTime} />
    )}
    {modifiedTime && <meta property="og:updated_time" content={modifiedTime} />}
    {articleSection && <meta property="article:section" content={articleSection} />}
    {candidateAuthors.map((author) => (
      <meta property="article:author" content={author} />
    ))}
    {siteData.author && (
      <meta property="article:publisher" content={siteData.author} />
    )}
    {articleTags.map((tag) => (
      <meta property="article:tag" content={tag} />
    ))}
  </>
)}

<!-- Twitter -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content={resolvedTitle} />
<meta name="twitter:description" content={resolvedDescription} />
{resolvedImage && <meta name="twitter:image" content={resolvedImage} />}
<meta name="twitter:image:alt" content={imageAlt} />
{siteData.author && <meta name="twitter:creator" content={siteData.author} />}
{twitterDomain && <meta name="twitter:domain" content={twitterDomain} />}

{typeof robots === "string"
  ? <meta name="robots" content={robots} />
  : robots && <meta name="robots" content="noindex, nofollow" />}

<!-- JSON LD -->
<Fragment set:html={jsonLD} />
