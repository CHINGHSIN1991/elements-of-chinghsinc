---
import { getCollection, type CollectionEntry } from 'astro:content';
import { formatDate } from "../../ts/utils";

interface Props {
  currentPost: CollectionEntry<'posts'>;
  limit?: number;
}

const { currentPost, limit = 3 } = Astro.props;

const allPosts = await getCollection('posts', ({ data }) => {
  return !data.draft;
});

// 獲取相關文章（相同分類，排除當前文章）
const relatedPosts = allPosts
  .filter(post => 
    post.id !== currentPost.id && 
    post.data.category === currentPost.data.category
  )
  .sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
  .slice(0, limit);
---

{relatedPosts.length > 0 && (
  // <div class="bg-gray-50 dark:bg-gray-800 p-6 rounded-lg">
  <div class="dark:border-r-2 dark:border-gray-700 border-r-2 border-gray-200 px-2">
    <h2 class="text-xl font-bold mb-4 pl-2">相關文章</h2>
    <ul class="space-y-1">
      {relatedPosts.map(relatedPost => (
        <li class="hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-300 px-2 py-1 rounded-md">
          <a
            href={`/blog/${relatedPost.id}`}
            class="block hover:text-primary-500 transition-colors"
          >
            <h3 class="font-medium text-sm line-clamp-2">
              {relatedPost.data.title}
            </h3>
            <span class="text-xs text-gray-500 mt-1 block">
              {formatDate(new Date(relatedPost.data.date))}
            </span>
          </a>
        </li>
      ))}
    </ul>
  </div>
)} 