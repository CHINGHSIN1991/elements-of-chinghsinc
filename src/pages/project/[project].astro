---
import { getCollection, type CollectionEntry } from 'astro:content';
import { slugify, formatDate } from '../../ts/utils';
import MainLayout from '../../layouts/MainLayout.astro';
import RelatedProjects from '../../components/project/RelatedProjects.astro';

export const prerender = true;

export async function getStaticPaths() {
  const allProjects = await getCollection('projects', ({ data }) => {
    return !data.draft;
  });
  
  return allProjects.map((project) => ({
    params: { project: project.id || slugify(project.data.title) },
    props: { project }
  }));
}

interface ProjectPageProps {
  project: CollectionEntry<'projects'>;
}

const { project } = Astro.props as ProjectPageProps;
const { data } = project;
---

<MainLayout title={data.title} description={data.description}>
  <div class="flex max-w-7xl mx-auto">
    <!-- left sidebar -->
    <aside class="w-64 shrink-0 hidden lg:block py-16 px-2">
      <div class="sticky-navbar-safe space-y-8">
        <!-- related projects -->
        <RelatedProjects currentProject={project} limit={3} />
      </div>
    </aside>

    <!-- main content -->
    <div class="flex-grow max-w-3xl pt-16 pb-32 px-8 shadow-dark-lg dark:shadow-dark-xl min-h-screen">
      <!-- project title and basic info -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{data.title}</h1>
        <div class="flex flex-wrap gap-4 text-text-secondary">
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <time datetime={data.date}>{formatDate(new Date(data.date))}</time>
          </div>
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            <a href={`/project/category/${slugify(data.category)}`} class="hover:text-primary">
              {data.category}
            </a>
          </div>
          {data.designers && data.designers.length > 0 && (
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span>{data.designers.join(', ')}</span>
            </div>
          )}
        </div>
      </header>
      
      <!-- project description -->
      <div class="mb-8">
        <p class="text-lg text-text-secondary italic">
          {data.description}
        </p>
      </div>
      
      <!-- tag list -->
      {data.tags && data.tags.length > 0 && (
        <div class="mb-8">
          <div class="flex flex-wrap gap-2">
            {data.tags.map((tag: string) => (
              <a
                href={`/tag/${slugify(tag)}`}
                class="px-3 py-1 bg-background-tertiary rounded-full text-sm hover:bg-primary hover:text-white transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </div>
      )}
      
      <!-- project cover image -->
      {data.cover && (
        <div class="mb-8">
          <img 
            src={data.cover} 
            alt={data.title || "專案圖片"} 
            class="w-full h-auto max-h-[600px] object-cover rounded-lg shadow-dark"
          />
        </div>
      )}
      
      <!-- project images -->
      {data.images && data.images.length > 0 && (
        <div class="mb-8">
          <h3 class="text-2xl font-bold mb-6">專案圖片</h3>
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {data.images.map((image: string) => (
              <div class="aspect-video overflow-hidden rounded-lg shadow-dark hover:shadow-dark-lg transition-all duration-300">
                <img 
                  src={image} 
                  alt={data.title || "專案圖片"} 
                  class="w-full h-full object-cover"
                />
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
    
    <!-- right sidebar -->
    <aside class="w-64 shrink-0 hidden xl:block py-16 px-2">
      <div class="sticky-navbar-safe space-y-4">
        <div class="px-2">
          <h2 class="text-xl font-bold mb-4 pl-2">專案資訊</h2>
          <div class="space-y-2 text-sm pl-2">
            <div class="flex justify-between">
              <span>分類</span>
              <span class="font-medium">{data.category}</span>
            </div>
            <div class="flex justify-between">
              <span>發布日期</span>
              <span class="font-medium">{formatDate(new Date(data.date))}</span>
            </div>
            <div class="flex justify-between">
              <span>設計師</span>
              <span class="font-medium">{data.designers?.length || 0} 位</span>
            </div>
            <div class="flex justify-between">
              <span>標籤數</span>
              <span class="font-medium">{data.tags?.length || 0}</span>
            </div>
            <div class="flex justify-between">
              <span>圖片數</span>
              <span class="font-medium">{data.images?.length || 0}</span>
            </div>
          </div>
        </div>
        
        <div class="mt-6 pl-2">
          <button
            id="backToTop"
            class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
          >
            Back to Top
          </button>
          <button
            id="expandAll"
            class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
          >
            Expand All
          </button>
          <button
            id="scrollToBottom"
            class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
          >
            Scroll to Bottom
          </button>
        </div>
      </div>
    </aside>
  </div>
</MainLayout>

<script>
  // back to top function
  document.getElementById('backToTop')?.addEventListener('click', () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });

  // expand all function
  let isExpanded = false;
  document.getElementById('expandAll')?.addEventListener('click', () => {
    const button = document.getElementById('expandAll');
    if (button) {
      isExpanded = !isExpanded;
      button.textContent = isExpanded ? 'Collapse All' : 'Expand All';
      
      // here you can add the logic for expand/collapse
      const details = document.querySelectorAll('details');
      details.forEach(detail => {
        detail.open = isExpanded;
      });
    }
  });

  // scroll to bottom function
  document.getElementById('scrollToBottom')?.addEventListener('click', () => {
    window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .prose {
    max-width: none;
  }
</style> 