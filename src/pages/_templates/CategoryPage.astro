---
import { type CollectionEntry } from 'astro:content';
import MainLayout from '../../layouts/MainLayout.astro';
import CategoryList from '../../components/common/CategoryList.astro';
import PopularItems from '../../components/common/PopularItems.astro';
import { slugify, getPublishedCollection } from '../../ts/utils';
import { localizePath, useTranslations } from '../../i18n/utils';

export function createGetStaticPaths(collection: string) {
  return async function getStaticPaths() {
    const allItems = await getPublishedCollection(collection);

    const uniqueCategories = [...new Set(allItems.map(item => item.data.category))];

    return uniqueCategories.map(category => {
      const filteredItems = allItems.filter(item => item.data.category === category);
      return {
        params: { category: slugify(category) },
        props: {
          items: filteredItems,
          category
        }
      };
    });
  };
}

interface CategoryPageProps<T = any> {
  category: string;
  items: CollectionEntry<T>[];
  /** Name of the prop passed to CardComponent, e.g. "post" or "project" */
  itemPropName: string;
  CardComponent: any;
  categoryListProps: {
    collectionName: string;
    heading: string;
    basePath: string;
  };
  /** Link to view all items of this type */
  allHref: string;
  titleText?: string;
  descriptionText?: string;
  ariaLabelText?: string;
  allLabelText?: string;
}

const {
  category,
  items,
  itemPropName,
  CardComponent,
  categoryListProps,
  allHref,
  titleText,
  descriptionText,
  ariaLabelText,
  allLabelText
} = Astro.props as CategoryPageProps;

const { t, lang } = useTranslations(Astro);
const collection = categoryListProps.collectionName;
const title = titleText
  ?? (collection === 'posts'
    ? t('blog.category.title', { category })
    : t('project.category.title', { category }));
const description = descriptionText
  ?? (collection === 'posts'
    ? t('blog.category.description', { category })
    : t('project.category.description', { category }));
const ariaLabel = ariaLabelText
  ?? (collection === 'posts'
    ? t('blog.category.ariaLabel')
    : t('project.category.ariaLabel'));
const allLabel = allLabelText
  ?? (collection === 'posts'
    ? t('blog.category.allLabel')
    : t('project.category.allLabel'));
const allLink = localizePath(allHref, lang);
---

<MainLayout title={title} description={description}>
  <section
    class="container mx-auto px-4 py-16"
    aria-label={ariaLabel}
  >
    <div class="flex gap-8 max-w-7xl mx-auto">
      <aside class="w-64 shrink-0 hidden lg:block">
        <div class="sticky-navbar-safe space-y-8">
          <CategoryList {...categoryListProps} currentCategory={category} />

          <PopularItems collectionName={categoryListProps.collectionName} linkPrefix={categoryListProps.basePath} limit={5} />
        </div>
      </aside>

      <div class="flex-grow mt-8">
        <h1 class="text-3xl font-bold mb-6">{title}</h1>
        <p class="mb-8">{description}</p>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {items.map((item) => (
            <CardComponent {...{ [itemPropName]: item }} />
          ))}
        </div>

        <div class="mt-12 text-center">
          <a href={allLink} class="px-6 py-2 bg-primary text-white rounded-md hover:bg-primary-dark transition-colors">
            {allLabel}
          </a>
        </div>
      </div>
    </div>
  </section>
</MainLayout>
