---
import { type CollectionEntry } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import CategoryList from '../../components/common/CategoryList.astro';
import RelatedItems from '../../components/common/RelatedItems.astro';
import TagList from '../../components/common/TagList.astro';
import BuyMeACoffee from '../../components/common/BuyMeACoffee.astro';
import { slugify, formatDate, getPublishedCollection } from '../../ts/utils';

export const prerender = true;

export async function getStaticPaths() {
  const allPosts = await getPublishedCollection('posts');
  return allPosts.map((post) => ({
    params: { post: post.id },
    props: { post }
  }));
}

interface PostPageProps {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props as PostPageProps;

if (!post) {
  return Astro.redirect('/404');
}

const { Content, headings } = await post.render();
---

<PostLayout post={post}>
  <div class="flex max-w-7xl mx-auto">
    <!-- left sidebar -->
    <aside class="w-64 shrink-0 hidden md:block py-16 px-2">
        <div class="sticky-navbar-safe space-y-8">
        <!-- category list -->
        <CategoryList
          collectionName="posts"
          heading="Categories"
          basePath="/blog"
          currentCategory={post.data.category}
        />

          <!-- related posts -->
          <RelatedItems currentItem={post} collection="posts" linkPrefix="/blog" limit={3} />
      </div>
    </aside>

    <!-- main content -->
    <div class="flex-grow max-w-3xl py-16 px-4 md:px-8 shadow-dark-lg dark:shadow-dark-xl">
      
      <!-- Mobile category and related posts -->
      <div class="block md:hidden mb-8 space-y-6">
        <div class="bg-background-secondary p-4 rounded-lg">
          <CategoryList
            collectionName="posts"
            heading="Categories"
            basePath="/blog"
            currentCategory={post.data.category}
          />
        </div>
          <div class="bg-background-secondary p-4 rounded-lg">
            <RelatedItems currentItem={post} collection="posts" linkPrefix="/blog" limit={3} />
          </div>
      </div>
      <!-- article title and basic info -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{post.data.title}</h1>
        <div class="flex flex-wrap gap-4 text-text-secondary">
          <div class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
              focusable="false"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <time datetime={post.data.date}>{formatDate(new Date(post.data.date))}</time>
          </div>
          <div class="flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 mr-2"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              aria-hidden="true"
              focusable="false"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            <a href={`/blog/category/${slugify(post.data.category)}`} class="hover:text-primary">
              {post.data.category}
            </a>
          </div>
        </div>
      </header>
      <!-- article description -->
      <div class="mb-8">
        <p class="text-lg text-text-secondary italic">
          {post.data.description}
        </p>
      </div>
      <!-- tag list -->
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="mb-8">
          <TagList tags={post.data.tags} basePath="/blog/tag" />
        </div>
      )}
      <!-- article content -->
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
    </div>
    <!-- right sidebar -->
    <aside class="w-64 shrink-0 hidden xl:block py-16 px-2">
      <div class="sticky-navbar-safe space-y-4">
        <div class="px-2">
          <h2 class="text-lg font-medium mb-3 pl-2 text-text-muted">Table of Contents</h2>
          <div
            id="tocCollapse"
            class="toc-collapse"
            data-state="expanded"
          >
            <div id="tocContent" class="space-y-4">
              <nav id="tableOfContents" class="table-of-contents">
                <ul class="space-y-1">
                  {headings.map(heading => (
                    <li class={`pl-${(heading.depth - 1) * 4} hover:bg-background-tertiary transition-colors duration-300 px-2 py-1 rounded-md`}>
                      <a
                        href={`#${heading.slug}`}
                        class="block hover:text-primary transition-colors text-xs text-text-secondary"
                      >
                        {heading.text}
                      </a>
                    </li>
                  ))}
                </ul>
              </nav>
              <div class="pl-2 space-y-0">
                <button
                  id="backToTop"
                  class="w-full border-y py-1 text-xs text-text-muted hover:bg-background-secondary transition"
                >
                  Back to Top
                </button>
                <button
                  id="expandAll"
                  class="w-full border-y py-1 text-xs text-text-muted hover:bg-background-secondary transition"
                  aria-expanded="true"
                  aria-controls="tocCollapse"
                >
                  Expand All
                </button>
                <button
                  id="scrollToBottom"
                  class="w-full border-y py-1 text-xs text-text-muted hover:bg-background-secondary transition"
                >
                  Scroll to Bottom
                </button>
              </div>
            </div>
          </div>
        </div>
        <BuyMeACoffee />

        <div class="px-2">
          <h2 class="text-lg font-medium mb-3 pl-2 text-text-muted">Article Info</h2>
          <div class="space-y-2 text-xs pl-2">
            <div class="flex justify-between">
              <span class="text-text-muted">Word Count</span>
              <span class="font-normal text-text-secondary">{post.body?.length || 0}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-text-muted">Sections</span>
              <span class="font-normal text-text-secondary">{headings.length}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-text-muted">Tags</span>
              <span class="font-normal text-text-secondary">{post.data.tags?.length || 0}</span>
            </div>
          </div>
        </div>
      </div>
    </aside>
  </div>
</PostLayout>

<script>
  import { setupScrollToTop, setupExpandAll, setupScrollToBottom } from '../../ts/scroll-utils';

  setupScrollToTop('backToTop');
  setupScrollToBottom('scrollToBottom');

  const tocCollapse = document.getElementById('tocCollapse');

  setupExpandAll('expandAll', 'Expand All', 'Collapse All', (expanded) => {
    if (tocCollapse) {
      tocCollapse.dataset.state = expanded ? 'expanded' : 'collapsed';
    }
  });

  // smooth scroll to anchor
  document.querySelectorAll('.table-of-contents a').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth' });
        }
      }
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .prose {
    max-width: none;
  }

  .toc-collapse {
    display: grid;
    grid-template-rows: 1fr;
    transition: grid-template-rows 240ms ease, opacity 240ms ease;
  }

  .toc-collapse > div {
    overflow: hidden;
  }

  .toc-collapse[data-state='collapsed'] {
    grid-template-rows: 0fr;
    opacity: 0;
    pointer-events: none;
  }

  @media (prefers-reduced-motion: reduce) {
    .toc-collapse {
      transition: none;
    }
  }
</style>
