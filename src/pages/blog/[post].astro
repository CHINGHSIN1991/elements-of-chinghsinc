---
import { getCollection, type CollectionEntry } from 'astro:content';
import PostLayout from '../../layouts/PostLayout.astro';
import CategorySection from '../../components/blog/CategorySection.astro';
import RelatedItems from '../../components/common/RelatedItems.astro';
import { slugify, formatDate } from '../../ts/utils';

export const prerender = true;

export async function getStaticPaths() {
  const allPosts = await getCollection('posts');
  return allPosts.map((post) => ({
    params: { post: post.id },
    props: { post }
  }));
}

interface PostPageProps {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props as PostPageProps;

if (!post) {
  return Astro.redirect('/404');
}

const { Content, headings } = await post.render();
---

<PostLayout post={post}>
  <div class="flex max-w-7xl mx-auto">
    <!-- left sidebar -->
    <aside class="w-64 shrink-0 hidden md:block py-16 px-2">
        <div class="sticky-navbar-safe space-y-8">
        <!-- category list -->
        <CategorySection currentCategory={post.data.category} />

          <!-- related posts -->
          <RelatedItems currentItem={post} collection="posts" linkPrefix="/blog" limit={3} />
      </div>
    </aside>

    <!-- main content -->
    <div class="flex-grow max-w-3xl py-16 px-4 md:px-8 shadow-dark-lg dark:shadow-dark-xl">
      
      <!-- Mobile category and related posts -->
      <div class="block md:hidden mb-8 space-y-6">
        <div class="bg-background-secondary p-4 rounded-lg">
          <CategorySection currentCategory={post.data.category} />
        </div>
          <div class="bg-background-secondary p-4 rounded-lg">
            <RelatedItems currentItem={post} collection="posts" linkPrefix="/blog" limit={3} />
          </div>
      </div>
      <!-- article title and basic info -->
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{post.data.title}</h1>
        <div class="flex flex-wrap gap-4 text-text-secondary">
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <time datetime={post.data.date}>{formatDate(new Date(post.data.date))}</time>
          </div>
          <div class="flex items-center">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
            </svg>
            <a href={`/blog/category/${slugify(post.data.category)}`} class="hover:text-primary">
              {post.data.category}
            </a>
          </div>
        </div>
      </header>
      <!-- article description -->
      <div class="mb-8">
        <p class="text-lg text-text-secondary italic">
          {post.data.description}
        </p>
      </div>
      <!-- tag list -->
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="mb-8">
          <div class="flex flex-wrap gap-2">
            {post.data.tags.map(tag => (
              <a
                href={`/blog/tag/${slugify(tag)}`}
                class="px-3 py-1 bg-background-tertiary rounded-full text-sm hover:bg-primary hover:text-white transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </div>
      )}
      <!-- article content -->
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Content />
      </div>
    </div>
    <!-- right sidebar -->
    <aside class="w-64 shrink-0 hidden xl:block py-16 px-2">
      <div class="sticky-navbar-safe space-y-4">
                 <div class="px-2">
           <h2 class="text-xl font-bold mb-4 pl-2">Table of Contents</h2>
          <nav class="table-of-contents">
            <ul class="space-y-1">
              {headings.map(heading => (
                <li class={`pl-${(heading.depth - 1) * 4} hover:bg-background-tertiary transition-colors duration-300 px-2 py-1 rounded-md`}>
                  <a
                    href={`#${heading.slug}`}
                    class="block hover:text-primary transition-colors text-sm"
                  >
                    {heading.text}
                  </a>
                </li>
              ))}
            </ul>
          </nav>
          <div class="mt-6 pl-2">
            <button
              id="backToTop"
              class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
            >
              Back to Top
            </button>
            <button
              id="expandAll"
              class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
            >
              Expand All
            </button>
            <button
              id="scrollToBottom"
              class="w-full border-y py-1 text-sm text-text-secondary hover:bg-background-secondary transition"
            >
              Scroll to Bottom
            </button>
          </div>
        </div>
                 <!-- article info -->
         <div class="px-2">
          <h2 class="text-xl font-bold mb-4 pl-2">Article Info</h2>
          <div class="space-y-2 text-sm pl-2">
            <div class="flex justify-between">
              <span>Word Count</span>
              <span class="font-medium">{post.body?.length || 0}</span>
            </div>
            <div class="flex justify-between">
              <span>Paragraph Count</span>
              <span class="font-medium">{headings.length}</span>
            </div>
            <div class="flex justify-between">
              <span>Tag Count</span>
              <span class="font-medium">{post.data.tags?.length || 0}</span>
            </div>
          </div>
        </div>
      </div>
    </aside>
  </div>
</PostLayout>

<script>
  // back to top function
  document.getElementById('backToTop')?.addEventListener('click', () => {
    window.scrollTo({ top: 0, behavior: 'smooth' });
  });

  // expand all function
  let isExpanded = false;
  document.getElementById('expandAll')?.addEventListener('click', () => {
    const button = document.getElementById('expandAll');
    if (button) {
      isExpanded = !isExpanded;
      button.textContent = isExpanded ? 'Collapse All' : 'Expand All';
      
      // here you can add the logic for expand/collapse
      const details = document.querySelectorAll('details');
      details.forEach(detail => {
        detail.open = isExpanded;
      });
    }
  });

  // scroll to bottom function
  document.getElementById('scrollToBottom')?.addEventListener('click', () => {
    window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
  });

  // smooth scroll to anchor
  document.querySelectorAll('.table-of-contents a').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target) {
          target.scrollIntoView({ behavior: 'smooth' });
        }
      }
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .prose {
    max-width: none;
  }
</style>
